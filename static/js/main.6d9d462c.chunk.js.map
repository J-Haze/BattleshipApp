{"version":3,"sources":["assets/winning-image.png","assets/losing-image.png","assets/battleship.png","factories/ship.js","factories/gameboard.js","factories/player.js","Components/Square.js","Components/Row.js","Components/Board.js","Components/PlayerFleet.js","Components/Fleet.js","Components/ModalEnd.js","Components/Game.js","Components/ModalHowTo.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shipFactory","shipLength","name","1","2","3","4","5","ship","i","push","hit","hitLocation","console","log","isSunk","sunkStatus","square","gameboardFactory","destroyer","submarine","cruiser","battleship","carrier","board","a","boatsSunk","allSunk","boatsPlaced","allPlaced","placeShip","shipName","position","orient","includes","shipNameVar","endPoint","closestEdge","b","Math","ceil","c","z","splice","length","receiveAttack","attackPosition","attackID","boatHitString","boatHit","player","playerName","gameboard","attackCoord","index","squaresToGuess","sendAttack","coord","indexOf","floor","random","Square","props","id","row","col","placementMode","playerAttack","phase","handlePlaceShip","handleClick","playerClickable","computerClickable","boardID","className","squareObj","key","onClick","Row","roww","rowObj","update","useEffect","map","j","Board","useState","rowState","setRows","rows","slice","PlayerFleet","toggledCarrier","toggledBattleship","toggledCruiser","toggledSubmarine","toggledDestroyer","carrierClickable","battleshipClickable","cruiserClickable","submarineClickable","destroyerClickable","placingShip","togglePlacement","Fleet","sunkCarrier","sunkBattleship","sunkCruiser","sunkSubmarine","sunkDestroyer","ModalEnd","winner","hideModal","src","winningImage","newGame","losingImage","Game","playerState","setPlayer","computer","setComputer","setRowState","orientation","setOrientation","setPlacingShip","refresh","setRefresh","setUpdate","setPhase","modalOpen","setModalOpen","setWinner","randomID","orientationNumber","randomOrientation","getRandomInt","min","max","autoPlaceShipPlayer","autoPlaceShipComputer","autoPlace","user","resetBoard","createRows","toggledShip","hideHowTo","event","stopPropagation","Header","howToOpen","setHowToOpen","ModalHowTo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d9d462c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/winning-image.bbc758c8.png\";","module.exports = __webpack_public_path__ + \"static/media/losing-image.cb9575d0.png\";","module.exports = __webpack_public_path__ + \"static/media/battleship.3bcbc474.png\";","\r\nconst shipFactory = (shipLength) => {\r\n    const shipNames = {\r\n        1: 'Submarine',\r\n        2: 'Destroyer',\r\n        3: 'Cruiser',\r\n        4: 'Battleship',\r\n        5: 'Carrier',\r\n    };\r\n\r\n    const name = shipNames[shipLength];\r\n\r\n    if (shipLength == 1) {\r\n        shipLength = 3;\r\n    }\r\n\r\n\r\n    let ship = [];\r\n    for (let i = 0; i < shipLength; i++) {\r\n        ship.push([false, i, name])\r\n    }\r\n\r\n    let hit = (hitLocation) => {\r\n        ship[hitLocation] = [true, hitLocation, name];\r\n        console.log(\"Hit!\", ship)\r\n        console.log(`You've hit my ${name}`)\r\n        return ship\r\n    }\r\n\r\n    let isSunk = () => {\r\n        let sunkStatus = false\r\n        ship[0][0] == true ? sunkStatus = true : sunkStatus = false\r\n        for (let square in ship) {\r\n            sunkStatus = (ship[square][0] && sunkStatus)\r\n        }\r\n        return sunkStatus\r\n    }\r\n\r\n    return {\r\n        name,\r\n        shipLength,\r\n        ship,\r\n        hit,\r\n        isSunk\r\n    }\r\n}\r\n\r\nexport default shipFactory;","import shipFactory from \"./ship\"\r\n\r\nconst gameboardFactory = () => {\r\n    const destroyer = shipFactory(2)\r\n    const submarine = shipFactory(3)\r\n    const cruiser = shipFactory(3)\r\n    const battleship = shipFactory(4)\r\n    const carrier = shipFactory(5)\r\n\r\n    let board = [];\r\n    for (let a = 0; a <= 99; a++) {\r\n        board.push(null)\r\n    }\r\n    \r\n    let boatsSunk = [];\r\n    let allSunk = false;\r\n\r\n    let boatsPlaced = [];\r\n    let allPlaced = false;\r\n\r\n    const placeShip = (shipName, position, orient) => {\r\n\r\n        if (boatsPlaced.includes(shipName)) {\r\n            return board\r\n        }\r\n\r\n        let shipLength = \"\";\r\n        let shipNameVar = \"\";\r\n\r\n        if (shipName == \"carrier\") {\r\n            shipLength = 5;\r\n            shipNameVar = shipFactory(5);\r\n        } else if (shipName == \"battleship\") {\r\n            shipLength = 4;\r\n            shipNameVar = shipFactory(4);\r\n        } else if (shipName == \"cruiser\") {\r\n            shipLength = 3;\r\n            shipNameVar = shipFactory(3);\r\n        } else if (shipName == \"submarine\") {\r\n            shipLength = 3;\r\n            shipNameVar = shipFactory(1);\r\n        } else if (shipName == \"destroyer\") {\r\n            shipLength = 2;\r\n            shipNameVar = shipFactory(2);\r\n        } else {\r\n            return board\r\n        };\r\n\r\n        //Checks for valid move\r\n        let endPoint = 0;\r\n        let closestEdge = 99;\r\n\r\n        if (orient == \"horizontal\") {\r\n            for (let b = position; b < (position + shipLength); b++) {\r\n                if (board[b] != null) {\r\n                    return board\r\n                }\r\n            };\r\n\r\n            endPoint = ((position + shipLength - 1) / 10);\r\n            if (position % 10 == 0) {\r\n                closestEdge = position / 10 + .9;\r\n            } else {\r\n                closestEdge = ((Math.ceil(position / 10)) - 0.1);\r\n            }\r\n        }\r\n\r\n        if (orient == \"vertical\") {\r\n            for (let c = position; c < (position + shipLength * 10); c += 10) {\r\n                if (board[c] != null) {\r\n                    console.log(`Illegal placement: ship already on square: ${c}`)\r\n                    return board\r\n                }\r\n            };\r\n\r\n            endPoint = ((position + ((shipLength - 1) * 10)));\r\n            closestEdge = 99;\r\n        }\r\n\r\n\r\n        if ((endPoint > closestEdge)) {\r\n            console.log(\"Illegal placement: over edge of board\")\r\n            return board\r\n        }\r\n\r\n        //Places the ship\r\n        for (let square in board) {\r\n            if ((position == square && (orient == \"horizontal\"))) {\r\n                for (let z = position; z < (position + shipLength); z++) {\r\n                    board.splice(z, 1, shipNameVar.ship[z - position])\r\n                }\r\n\r\n            } else if ((position == square && (orient == \"vertical\"))) {\r\n                for (let z = position; z < (position + shipLength * 10); z += 10) {\r\n                    board.splice(z, 1, shipNameVar.ship[(z - position) / 10])\r\n                }\r\n            }\r\n            if (!boatsPlaced.includes(shipName)) {\r\n                boatsPlaced.push(shipName);\r\n            }\r\n\r\n            if (boatsPlaced.length > 4) {\r\n                allPlaced = true;\r\n            } else {\r\n                allPlaced = false;\r\n            }\r\n        }\r\n        return {\r\n            board,\r\n            allPlaced,\r\n            boatsPlaced,\r\n        }\r\n    }\r\n\r\n    const receiveAttack = (attackPosition) => {\r\n        let attackID = board[attackPosition];\r\n\r\n        if (board[attackPosition] == null) {\r\n            console.log(\"Attack missed\")\r\n            board[attackPosition] = \"miss\";\r\n            return board\r\n        }\r\n\r\n        if ((attackID[0] == true) || (board[attackPosition] == \"miss\")) {\r\n            console.log(\"Already guessed this position\")\r\n            return board\r\n        }\r\n\r\n        if (attackID[0] == false) {\r\n            console.log(\"Receive Attack hit!\")\r\n            let hitLocation = attackID[1];\r\n            let boatHitString = attackID[2];\r\n            let boatHit = \"\";\r\n\r\n            if (boatHitString == \"Carrier\") {\r\n                boatHit = carrier;\r\n            } else if (boatHitString == \"Battleship\") {\r\n                boatHit = battleship;\r\n            } else if (boatHitString == \"Cruiser\") {\r\n                boatHit = cruiser;\r\n            } else if (boatHitString == \"Destroyer\") {\r\n                boatHit = destroyer;\r\n            } else if (boatHitString == \"Submarine\") {\r\n                boatHit = submarine;\r\n            }\r\n\r\n            boatHit.hit(hitLocation);\r\n            board[attackPosition][0] = true;\r\n\r\n            if (boatHit.isSunk()) {\r\n                console.log(`Player's ${boatHitString} is sunk!`)\r\n                boatsSunk.push(boatHitString)\r\n            }\r\n\r\n            if (boatsSunk.length > 4) {\r\n                allSunk = true;\r\n                console.log(\"ALL BOATS SUNK\")\r\n            }\r\n        }\r\n\r\n        return {\r\n            board,\r\n            allSunk,\r\n            boatsSunk\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        board,\r\n        placeShip,\r\n        boatsPlaced,\r\n        allPlaced,\r\n        receiveAttack,\r\n        allSunk,\r\n        boatsSunk\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default gameboardFactory;","import gameboardFactory from \"./gameboard\"\r\n\r\nconst player = (playerName) => {\r\n    const getBoard = gameboardFactory();\r\n    const gameboard = getBoard;\r\n    let attackCoord = 100;\r\n    let index = 100;\r\n\r\n    const squaresToGuess = [];\r\n\r\n    for (let i = 0; i <= 99; i++) {\r\n        squaresToGuess.push(i);\r\n    }\r\n\r\n    const sendAttack = (coord) => {\r\n        if (playerName == \"Player\") {\r\n            attackCoord = coord;\r\n            index = squaresToGuess.indexOf(attackCoord);\r\n            squaresToGuess.splice(index, 1);\r\n        } else {\r\n             //Sends a random attack\r\n            attackCoord = Math.floor(Math.random() * (squaresToGuess.length - 1));\r\n            index = squaresToGuess.indexOf(attackCoord);\r\n            squaresToGuess.splice(index, 1);\r\n        }\r\n\r\n        return attackCoord\r\n    }\r\n\r\n    return {\r\n        gameboard,\r\n        squaresToGuess,\r\n        sendAttack\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default player;","import React, { useState, useEffect } from \"react\"\r\n\r\nfunction Square(props) {\r\n\r\n    const id = (props.row * 10 + props.col)\r\n\r\n    let attackClick = () => props.handleClick(id);\r\n    let placementClick = () => props.handlePlaceShip(id);\r\n\r\n    let placementMode = null;\r\n    let playerAttack = null;\r\n\r\n    if (props.phase == \"setup\") {\r\n        placementMode = placementClick;\r\n        playerAttack = null;\r\n    } else if (props.phase == \"playerTurn\") {\r\n        placementMode = null;\r\n        playerAttack = attackClick;\r\n    }\r\n\r\n    let playerClickable = \"\";\r\n    if (props.phase == \"setup\") {\r\n        playerClickable = \" clickable\"\r\n    } else {\r\n        playerClickable = \"\";\r\n    }\r\n\r\n    let computerClickable = \"\";\r\n    if (props.phase == \"playerTurn\") {\r\n        computerClickable = \"clickable\"\r\n    } else {\r\n        computerClickable = \"\";\r\n    }\r\n\r\n    if (props.boardID == \"player\") {\r\n        return (\r\n            <div className=\"square\">\r\n                {(props.squareObj != null) ?\r\n                    ((props.squareObj[0] == false) ?\r\n                        (<div className=\"ship\" key={id}></div>) :\r\n                        (props.squareObj[0] == true) ?\r\n                            (<div className=\"hit\" key={id}>+</div>) :\r\n                            (props.squareObj[0] == \"sunk\") ?\r\n                                (<div className=\"sunk\" key={id}>+</div>) :\r\n                                (props.squareObj == \"miss\") ?\r\n                                    (<div className=\"miss\" key={id}>&#8226;</div>) :\r\n                                    (<div>error</div>)) :\r\n                    (<div className={`empty ${playerClickable}`} key={id} onClick={placementMode}></div>)\r\n                }\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"square\">\r\n                {(props.squareObj != null) ?\r\n                    ((props.squareObj[0] == false) ?\r\n                        (<div className={`empty ${computerClickable}`} key={id} onClick={playerAttack}></div>) :\r\n                        (props.squareObj[0] == true) ?\r\n                            (<div className=\"hit\" key={id}>+</div>) :\r\n                            (props.squareObj[0] == \"sunk\") ?\r\n                                (<div className=\"sunk\" key={id}>+</div>) :\r\n                                (props.squareObj == \"miss\") ?\r\n                                    (<div className=\"miss\" key={id}>&#8226;</div>) :\r\n                                    (<div>error</div>)) :\r\n                    (<div className={`empty ${computerClickable}`} key={id} onClick={playerAttack}></div>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Square;","import React, { useState, useEffect } from \"react\"\r\nimport Square from \"./Square\"\r\n\r\nfunction Row(props) {\r\n    let { roww, rowObj, handleClick, phase, boardID, handlePlaceShip, update } = props;\r\n\r\n    useEffect(() => {\r\n        rowObj = rowObj;\r\n    },\r\n        [update]\r\n    );\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {rowObj.map((square, j) => {\r\n                return (\r\n                    <Square\r\n                        key={j}\r\n                        row={roww}\r\n                        col={j}\r\n                        squareObj={square}\r\n                        handleClick={handleClick}\r\n                        phase={phase}\r\n                        boardID={boardID}\r\n                        handlePlaceShip={handlePlaceShip}\r\n                    />\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n};\r\nexport default Row;","import React, { useState, useEffect } from \"react\"\r\nimport Row from \"./Row.js\"\r\n\r\n\r\nfunction Board(props) {\r\n    let { id, board, phase, boardID, handlePlaceShip, update } = props;\r\n\r\n    const [rowState, setRows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let rows = [];\r\n        for (let i = 0; i < board.length; i += 10) {\r\n            rows.push(board.slice(i, i + 10));\r\n        }\r\n        setRows(rows);\r\n    }, [update]\r\n    );\r\n\r\n    return (\r\n        <div id={id} className=\"board\">\r\n            {rowState.map((row, i) => {\r\n                return (\r\n                    <Row\r\n                        key={i}\r\n                        roww={i}\r\n                        rowObj={row}\r\n                        phase={phase}\r\n                        boardID={boardID}\r\n                        handlePlaceShip={handlePlaceShip}\r\n                    />\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React from \"react\"\r\n\r\nfunction PlayerFleet(props) {\r\n\r\n    let toggledCarrier = \"\";\r\n    let toggledBattleship = \"\";\r\n    let toggledCruiser = \"\";\r\n    let toggledSubmarine = \"\";\r\n    let toggledDestroyer = \"\";\r\n\r\n    let carrierClass = \"fleet-square\";\r\n    let battleshipClass = \"fleet-square\";\r\n    let cruiserClass = \"fleet-square\";\r\n    let submarineClass = \"fleet-square\";\r\n    let destroyerClass = \"fleet-square\";\r\n\r\n    let carrierClickable = \"clickable\";\r\n    let battleshipClickable = \"clickable\";\r\n    let cruiserClickable = \"clickable\";\r\n    let submarineClickable = \"clickable\";\r\n    let destroyerClickable = \"clickable\";\r\n\r\n    if (props.placingShip == \"carrier\" || props.boatsPlaced.includes(\"carrier\")) {\r\n        toggledCarrier = \" toggle\";\r\n    } else {\r\n        toggledCarrier = \"\";\r\n    };\r\n\r\n    if (props.placingShip == \"battleship\" || props.boatsPlaced.includes(\"battleship\")) {\r\n        toggledBattleship = \" toggle\";\r\n    } else {\r\n        toggledBattleship = \"\";\r\n    };\r\n\r\n    if (props.placingShip == \"cruiser\" || props.boatsPlaced.includes(\"cruiser\")) {\r\n        toggledCruiser = \" toggle\";\r\n    } else {\r\n        toggledCruiser = \"\";\r\n    };\r\n\r\n    if (props.placingShip == \"submarine\" || props.boatsPlaced.includes(\"submarine\")) {\r\n        toggledSubmarine = \" toggle\";\r\n    } else {\r\n        toggledSubmarine = \"\";\r\n    };\r\n\r\n    if (props.placingShip == \"destroyer\" || props.boatsPlaced.includes(\"destroyer\")) {\r\n        toggledDestroyer = \" toggle\";\r\n    } else {\r\n        toggledDestroyer = \"\";\r\n    };\r\n\r\n    if (props.boatsPlaced.includes(\"carrier\")) {\r\n        carrierClickable = \"\";\r\n    } else {\r\n        carrierClickable = \"clickable\"\r\n    }\r\n\r\n    if (props.boatsPlaced.includes(\"battleship\")) {\r\n        battleshipClickable = \"\";\r\n    } else {\r\n        battleshipClickable = \"clickable\"\r\n    }\r\n\r\n    if (props.boatsPlaced.includes(\"cruiser\")) {\r\n        cruiserClickable = \"\";\r\n    } else {\r\n        cruiserClickable = \"clickable\"\r\n    }\r\n\r\n    if (props.boatsPlaced.includes(\"submarine\")) {\r\n        submarineClickable = \"\";\r\n    } else {\r\n        submarineClickable = \"clickable\"\r\n    }\r\n\r\n    if (props.boatsPlaced.includes(\"destroyer\")) {\r\n        destroyerClickable = \"\";\r\n    } else {\r\n        destroyerClickable = \"clickable\"\r\n    }\r\n\r\n    if (props.orient == \"horizontal\") {\r\n        return (\r\n            <div id={props.id} className=\"player-fleet\" >\r\n                <div className={`carrier-horizontal ${carrierClickable} ship-harbor-horizontal-player${toggledCarrier}`} onClick={() => props.togglePlacement(\"carrier\")}>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                </div>\r\n                <div className={`battleship-horizontal ${battleshipClickable} ship-harbor-horizontal-player${toggledBattleship}`} onClick={() => props.togglePlacement(\"battleship\")}>\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                </div>\r\n                <div className={`cruiser-horizontal ${cruiserClickable} ship-harbor-horizontal-player${toggledCruiser}`} onClick={() => props.togglePlacement(\"cruiser\")}>\r\n                    <div className={cruiserClass}></div>\r\n                    <div className={cruiserClass}></div>\r\n                    <div className={cruiserClass}></div>\r\n                </div>\r\n                <div className={`submarine-horizontal ${submarineClickable} ship-harbor-horizontal-player${toggledSubmarine}`} onClick={() => props.togglePlacement(\"submarine\")}>\r\n                    <div className={submarineClass}></div>\r\n                    <div className={submarineClass}></div>\r\n                    <div className={submarineClass}></div>\r\n                </div>\r\n                <div className={`destroyer-horizontal ${destroyerClickable} ship-harbor-horizontal-player${toggledDestroyer}`} onClick={() => props.togglePlacement(\"destroyer\")}>\r\n                    <div className={destroyerClass}></div>\r\n                    <div className={destroyerClass}></div>\r\n                </div>\r\n            </div >\r\n        )\r\n    } else {\r\n        return (\r\n            <div id={props.id} className=\"fleet-vertical\" >\r\n                <div className={`carrier-vertical ${carrierClickable} ship-harbor-vertical${toggledCarrier}`} onClick={() => props.togglePlacement(\"carrier\")} >\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                    <div className={carrierClass}></div>\r\n                </div>\r\n                <div className={`battleship-vertical ${battleshipClickable} ship-harbor-vertical${toggledBattleship}`} onClick={() => props.togglePlacement(\"battleship\")} >\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                    <div className={battleshipClass}></div>\r\n                </div>\r\n                <div className={`cruiser-vertical ${cruiserClickable} ship-harbor-vertical${toggledCruiser}`} onClick={() => props.togglePlacement(\"cruiser\")} >\r\n                    <div className={cruiserClass}></div>\r\n                    <div className={cruiserClass}></div>\r\n                    <div className={cruiserClass}></div>\r\n                </div>\r\n                <div className={`submarine-vertical ${submarineClickable} ship-harbor-vertical${toggledSubmarine}`} onClick={() => props.togglePlacement(\"submarine\")} >\r\n                    <div className={submarineClass}></div>\r\n                    <div className={submarineClass}></div>\r\n                    <div className={submarineClass}></div>\r\n                </div>\r\n                <div className={`destroyer-vertical ${destroyerClickable} ship-harbor-vertical${toggledDestroyer}`} onClick={() => props.togglePlacement(\"destroyer\")} >\r\n                    <div className={destroyerClass}></div>\r\n                    <div className={destroyerClass}></div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n};\r\n\r\nexport default PlayerFleet;","import React, { useState, useEffect } from \"react\"\r\n\r\nfunction Fleet(props) {\r\n\r\n    let sunkCarrier = \"\";\r\n    let sunkBattleship = \"\";\r\n    let sunkCruiser = \"\";\r\n    let sunkSubmarine = \"\";\r\n    let sunkDestroyer = \"\";\r\n\r\n    if (props.boatsSunk.includes(\"Carrier\")) {\r\n        sunkCarrier = \"sunk\";\r\n    } else {\r\n        sunkCarrier = \"\";\r\n    };\r\n\r\n    if (props.boatsSunk.includes(\"Battleship\")) {\r\n        sunkBattleship = \"sunk\";\r\n    } else {\r\n        sunkBattleship = \"\";\r\n    };\r\n\r\n    if (props.boatsSunk.includes(\"Cruiser\")) {\r\n        sunkCruiser = \"sunk\";\r\n    } else {\r\n        sunkCruiser = \"\";\r\n    };\r\n\r\n    if (props.boatsSunk.includes(\"Submarine\")) {\r\n        sunkSubmarine = \"sunk\";\r\n    } else {\r\n        sunkSubmarine = \"\";\r\n    };\r\n\r\n    if (props.boatsSunk.includes(\"Destroyer\")) {\r\n        sunkDestroyer = \"sunk\";\r\n    } else {\r\n        sunkDestroyer = \"\";\r\n    };\r\n\r\n    return (\r\n        <div id={props.id} >\r\n            <div className=\"ship-text\">Aircraft Carrier</div>\r\n            <div className={`carrier-horizontal ship-harbor-horizontal`} >\r\n                <div className={`fleet-square ${sunkCarrier}`}></div>\r\n                <div className={`fleet-square ${sunkCarrier}`}></div>\r\n                <div className={`fleet-square ${sunkCarrier}`}></div>\r\n                <div className={`fleet-square ${sunkCarrier}`}></div>\r\n                <div className={`fleet-square ${sunkCarrier}`}></div>\r\n            </div>\r\n            <div className=\"ship-text\"> Battleship </div>\r\n            <div className={`battleship-horizontal ship-harbor-horizontal`} >\r\n                <div className={`fleet-square ${sunkBattleship}`}></div>\r\n                <div className={`fleet-square ${sunkBattleship}`}></div>\r\n                <div className={`fleet-square ${sunkBattleship}`}></div>\r\n                <div className={`fleet-square ${sunkBattleship}`}></div>\r\n            </div>\r\n            <div className=\"ship-text\">Cruiser</div>\r\n            <div className={`cruiser-horizontal ship-harbor-horizontal`} >\r\n                <div className={`fleet-square ${sunkCruiser}`}></div>\r\n                <div className={`fleet-square ${sunkCruiser}`}></div>\r\n                <div className={`fleet-square ${sunkCruiser}`}></div>\r\n            </div>\r\n            <div className=\"ship-text\">Submarine</div>\r\n            <div className={`submarine-horizontal ship-harbor-horizontal`} >\r\n                <div className={`fleet-square ${sunkSubmarine}`}></div>\r\n                <div className={`fleet-square ${sunkSubmarine}`}></div>\r\n                <div className={`fleet-square ${sunkSubmarine}`}></div>\r\n            </div>\r\n            <div className=\"ship-text\">Destroyer</div>\r\n            <div className={`destroyer-horizontal ship-harbor-horizontal`} >\r\n                <div className={`fleet-square ${sunkDestroyer}`}></div>\r\n                <div className={`fleet-square ${sunkDestroyer}`}></div>\r\n            </div>\r\n        </div >\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default Fleet;","import React, { useState, useEffect } from \"react\";\r\nimport winningImage from \"../assets/winning-image.png\"\r\nimport losingImage from \"../assets/losing-image.png\"\r\n\r\nfunction ModalEnd(props) {\r\n\r\n    if (props.winner == \"Player\") {\r\n        return (\r\n            <div className=\"modal\">\r\n                <div id=\"player-wins\" className=\"modal-content\">\r\n                    <span className=\"close\" onClick={props.hideModal}>&times;</span>\r\n                    <div className=\"message\">You Win!</div>\r\n                    <img id=\"winning-img\" className=\"image\" src={winningImage} />\r\n                    <div id=\"newGame\" onClick={() => props.newGame()}>Play again?</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"modal\">\r\n                <div id=\"computer-wins\" className=\"modal-content\">\r\n                    <span className=\"close\" onClick={props.hideModal}>&times;</span>\r\n                    <div className=\"message\"> You Lose.</div>\r\n                    <img id=\"losing-img\" className=\"image\" src={losingImage} />\r\n                    <div id=\"renewGame\" onClick={() => props.newGame()}>Play again?</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ModalEnd;","import React, { useState, useEffect } from \"react\"\r\nimport shipFactory from \"../factories/ship\"\r\nimport gameboardFactory from \"../factories/gameboard\"\r\nimport player from \"../factories/player\"\r\nimport Board from \"./Board.js\"\r\nimport Row from \"./Row.js\"\r\nimport PlayerFleet from \"./PlayerFleet.js\"\r\nimport Fleet from \"./Fleet.js\"\r\nimport ModalEnd from \"./ModalEnd.js\"\r\n\r\n\r\nfunction Game() {\r\n    const [playerState, setPlayer] = useState(player(\"Player\"))\r\n    const [computer, setComputer] = useState(player(\"Computer\")) \r\n    const [rowState, setRowState] = useState([]);\r\n    let rows = [];\r\n    const [orientation, setOrientation] = useState(\"horizontal\");\r\n    const [placingShip, setPlacingShip] = useState(null);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [update, setUpdate] = useState(false);\r\n    const [phase, setPhase] = useState(\"setup\")\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    function handlePlaceShip(id) {\r\n        playerState.gameboard.placeShip(placingShip, id, orientation);\r\n        setPlayer(playerState)\r\n        setUpdate(!update)\r\n    }\r\n\r\n    function togglePlacement(toggledShip) {\r\n        if (playerState.gameboard.boatsPlaced.includes(toggledShip)) {\r\n            console.log(\"Ship already placed\")\r\n            return\r\n        }\r\n\r\n        if (placingShip == toggledShip) {\r\n            setPlacingShip(null)\r\n        } else {\r\n            setPlacingShip(toggledShip)\r\n        }\r\n    }\r\n\r\n    function rotateShips() {\r\n        if (orientation == \"vertical\") {\r\n            setOrientation(\"horizontal\")\r\n        } else if (orientation == \"horizontal\") {\r\n            setOrientation(\"vertical\")\r\n        } else {\r\n            console.log(\"error- rotation\")\r\n        }\r\n    }\r\n\r\n    let randomID = \"\";\r\n    let orientationNumber = \"\";\r\n    let randomOrientation = \"\"\r\n\r\n    function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    function autoPlaceShipPlayer(ship) {\r\n        while (!playerState.gameboard.boatsPlaced.includes(ship)) {\r\n            randomID = getRandomInt(0, 99);\r\n            orientationNumber = getRandomInt(0, 1);\r\n            (orientationNumber == 0) ? randomOrientation = \"horizontal\" : randomOrientation = \"vertical\";\r\n            playerState.gameboard.placeShip(ship, randomID, randomOrientation);\r\n        }\r\n    }\r\n\r\n    function autoPlaceShipComputer(ship) {\r\n        while (!computer.gameboard.boatsPlaced.includes(ship)) {\r\n            randomID = getRandomInt(0, 99);\r\n            orientationNumber = getRandomInt(0, 1);\r\n            (orientationNumber == 0) ? randomOrientation = \"horizontal\" : randomOrientation = \"vertical\";\r\n            computer.gameboard.placeShip(ship, randomID, randomOrientation);\r\n        }\r\n    }\r\n\r\n    function autoPlace(user) {\r\n        if (user == \"player\") {\r\n            resetBoard();\r\n            autoPlaceShipPlayer(\"carrier\");\r\n            setPlayer(playerState);\r\n            autoPlaceShipPlayer(\"battleship\");\r\n            setPlayer(playerState);\r\n            autoPlaceShipPlayer(\"cruiser\");\r\n            setPlayer(playerState);\r\n            autoPlaceShipPlayer(\"submarine\");\r\n            setPlayer(playerState);\r\n            autoPlaceShipPlayer(\"destroyer\");\r\n            setPlayer(playerState);\r\n            setUpdate(!update);\r\n        };\r\n\r\n        if (user == \"computer\") {\r\n            autoPlaceShipComputer(\"carrier\");\r\n            setComputer(computer);\r\n            autoPlaceShipComputer(\"battleship\");\r\n            setComputer(computer);\r\n            autoPlaceShipComputer(\"cruiser\");\r\n            setComputer(computer);\r\n            autoPlaceShipComputer(\"submarine\");\r\n            setComputer(computer);\r\n            autoPlaceShipComputer(\"destroyer\");\r\n            setComputer(computer);\r\n            setUpdate(!update);\r\n            setRefresh(!refresh);\r\n        };\r\n    };\r\n\r\n    function resetBoard() {\r\n        setPlayer(player(\"Player\"));\r\n        setComputer(player(\"Computer\"));\r\n        setPlacingShip(null);\r\n        setUpdate(!update);\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    let attackCoord = \"\";\r\n\r\n    function startGame() {\r\n        if (playerState.gameboard.boatsPlaced.length > 4) {\r\n            autoPlace(\"computer\")\r\n            setPhase(\"playerTurn\")\r\n        }\r\n    };\r\n\r\n    function handleClick(id) {\r\n        attackCoord = playerState.sendAttack(id);\r\n        computer.gameboard.receiveAttack(attackCoord);\r\n        setRefresh(!refresh);\r\n        console.log(\"allSunk?\", computer.gameboard.boatsSunk.length)\r\n        if (computer.gameboard.boatsSunk.length > 4) {\r\n            console.log(computer.gameboard.boatsSunk)\r\n            setWinner(\"Player\")\r\n            setModalOpen(true)\r\n            setPhase(\"gameOver\")\r\n        } else {\r\n            setPhase(\"computerTurn\");\r\n        }\r\n    };\r\n\r\n    function createRows(board) {\r\n        rows = [];\r\n        for (let i = 0; i < board.length; i += 10) {\r\n            rows.push(board.slice(i, i + 10));\r\n        }\r\n        setRowState(rows);\r\n    }\r\n\r\n    useEffect(() => {\r\n        createRows(computer.gameboard.board);\r\n    }, [computer, refresh]\r\n    );\r\n\r\n    function computerAttack() {\r\n        attackCoord = computer.sendAttack(1);\r\n        playerState.gameboard.receiveAttack(attackCoord);\r\n        setPlayer(playerState)\r\n        setUpdate(!update);\r\n        setRefresh(!refresh);\r\n\r\n        if (playerState.gameboard.boatsSunk.length > 4) {\r\n            console.log(playerState.gameboard.boatsSunk)\r\n            setWinner(\"Computer\")\r\n            setModalOpen(true)\r\n            setPhase(\"gameOver\")\r\n        } else {\r\n            setPhase(\"playerTurn\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (phase == \"computerTurn\") {\r\n            computerAttack();\r\n        }\r\n    }, [phase]\r\n    )\r\n\r\n    function newGame() {\r\n        resetBoard();\r\n        setModalOpen(false);\r\n        setWinner(null);\r\n        setPhase(\"setup\");\r\n    }\r\n\r\n    function hideModal() {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div id=\"game\">\r\n            <div id=\"header-row\">\r\n                <div id=\"player-title\" className=\"title\">Player</div>\r\n                <div id=\"computer-title\" className=\"title\">Computer</div>\r\n            </div>\r\n            <div id=\"top-row\">\r\n                {modalOpen && <ModalEnd\r\n                    winner={winner}\r\n                    newGame={newGame}\r\n                    hideModal={hideModal}\r\n                />}\r\n                <div id=\"setup\">\r\n                    {(phase == \"setup\") ?\r\n                        <div id=\"setup-container\">\r\n                            <PlayerFleet\r\n                                id=\"setup-fleet\"\r\n                                className=\"player-fleet\"\r\n                                orient={orientation}\r\n                                togglePlacement={togglePlacement}\r\n                                placingShip={placingShip}\r\n                                phase={phase}\r\n                                boatsPlaced={playerState.gameboard.boatsPlaced}\r\n                                update={update}\r\n                            />\r\n                            <div id=\"setup-buttons\">\r\n                                <div id=\"rotate\" className=\"btn\" onClick={() => rotateShips()}>Rotate</div>\r\n                                <div id=\"auto-place\" className=\"btn\" onClick={() => autoPlace(\"player\")}>Auto Place</div>\r\n                                <div id=\"reset\" className=\"btn\" onClick={() => resetBoard()}>Reset</div>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <Fleet\r\n                            id=\"player-fleet\"\r\n                            phase={phase}\r\n                            boatsSunk={playerState.gameboard.boatsSunk}\r\n                            refresh={refresh}\r\n                        />\r\n                    }\r\n                </div>\r\n\r\n                <div id=\"col-one\" className=\"column\">\r\n                    <Board\r\n                        key={\"player\"}\r\n                        id=\"player-board\"\r\n                        board={playerState.gameboard.board}\r\n                        phase={phase}\r\n                        boardID={\"player\"}\r\n                        handlePlaceShip={handlePlaceShip}\r\n                        update={update}\r\n                    />\r\n\r\n                </div>\r\n                <div id=\"col-two\" className=\"column\">\r\n                    <div id=\"computer-board\" className=\"board\">\r\n                        {rowState.map((row, i) => {\r\n                            return (\r\n                                <Row\r\n                                    key={i}\r\n                                    roww={i}\r\n                                    rowObj={row}\r\n                                    handleClick={handleClick}\r\n                                    phase={phase}\r\n                                    boardID={\"computer\"}\r\n                                    update={update}\r\n                                />\r\n                            );\r\n                        })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Fleet\r\n                    id=\"computer-fleet\"\r\n                    phase={phase}\r\n                    boatsSunk={computer.gameboard.boatsSunk}\r\n                    refresh={refresh}\r\n                />\r\n            </div>\r\n            <div id=\"bottom-row\">\r\n                {(phase == \"setup\") ?\r\n                    < div id=\"start-button\" onClick={() => startGame()}>Start</div> :\r\n                    <div id=\"newGame\" onClick={() => newGame()}>New Game</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction ModalEnd(props) {\r\n\r\n    return (\r\n        <div className=\"modal\" onClick={() => { props.hideHowTo() }}>\r\n            <div id=\"howToModal\" className=\"modal-content\" onClick={(event) => {event.stopPropagation()}}>\r\n                <span className=\"close\" onClick={() => { props.hideHowTo() }}>&times;</span>\r\n                <div className=\"howToTop\"> <strong>How To Play:</strong></div>\r\n                <div className=\"howToBottom space\">\r\n                    <div className=\"head\"> <strong>Objective:</strong></div>\r\n                    <div className=\"space \">The object of Battleship is to try and sink all of the Computer's ships before they sink all of your ships.</div>\r\n                    <div className=\"space \">All of the Computer's ships are hidden somewhere on their board. On your turns, you will select squares on the Computer's board to attack. On the Computer's turns, the computer will guess squares on your board to attack. Neither you nor the Computer can see the other's ships so you must try to guess where they are.\r\n                        </div>\r\n                    <div className=\"phases head\"><strong>Phases:</strong></div>\r\n                    <div className=\"\">\r\n                        <div className=\"setup-space  list\"><strong>1. Setup:</strong></div>\r\n                        <div className=\"\">Place your ships somewhere on the board. Or select \"Auto Place\" to have the ships randomly placed on your board. Then select the \"Start\" button to begin the game.</div>\r\n                    <div className=\"space  list\"><strong>2. Player Turn:</strong></div>\r\n                    <div className=\"\">Select a square on the Computer's board to attack. If the attack hits one of the Computer's ships, the square will turn red. If the attack misses the Computer's ships, the square will turn blue.</div>\r\n                    <div className=\"space  list\"><strong>3. Computer Turn:</strong></div>\r\n                        <div className=\"\">Select a square on the Computer's board to attack. If the attack hits one of the Computer's ships, the square will turn red.</div>\r\n                    <div className=\"space  list\"><strong>4. Repeat 2 & 3: </strong></div>\r\n                    <div className=\"\">Player and Computer alternate turns until a player sinks all of the other player's ships. When a ship is sunk, the ship in the player's fleet will fade. The first person to sink all 5 of the other player's ships is declared the winner!</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalEnd;","import React, { useState, useEffect } from \"react\"\r\nimport ModalHowTo from \"./ModalHowTo.js\"\r\nimport battleship from \"../assets/battleship.png\"\r\n\r\nfunction Header() {\r\n    const [howToOpen, setHowToOpen] = useState(false);\r\n\r\n    function howTo() {\r\n        setHowToOpen(true)\r\n    }\r\n\r\n    function hideHowTo() {\r\n        setHowToOpen(false)\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div id=\"battleship\">BattleShip</div>\r\n            <img id=\"battleship-icon\" src={battleship} />\r\n            <div id=\"how-to\" onClick={() => howTo()}> How To Play\r\n            </div>\r\n            {howToOpen && <ModalHowTo\r\n                hideHowTo={hideHowTo}\r\n            />}\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./Components/Game\";\r\nimport Header from \"./Components/Header\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}